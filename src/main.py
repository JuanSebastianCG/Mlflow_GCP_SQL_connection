#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MLflow Service - Main Entry Point

Servicio independiente de MLflow para el orquestador de modelos ML.
"""

import os
import sys
import signal
import logging
import subprocess
import socket
import time
import threading
from urllib.parse import urlparse
from typing import Optional

from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# A√±adir el directorio ra√≠z del proyecto a sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, project_root)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

class MigrationLogFilter(logging.Filter):
    """Filtro para suprimir logs repetitivos de migraci√≥n de MLflow."""
    def filter(self, record):
        msg = record.getMessage()
        # Filtrar solo los mensajes que vienen del subproceso del servidor MLflow
        if "[MLflow Server]" in msg:
            # Palabras clave para identificar y suprimir logs de migraci√≥n ruidosos
            filter_out_keywords = [
                "alembic.runtime.migration",
                "mlflow.store.db.utils",
                "Creating initial MLflow database tables",
                "Updating database tables",
                "Task queue depth is"
            ]
            # Si alguna palabra clave est√° en el mensaje, no lo muestres
            if any(keyword in msg for keyword in filter_out_keywords):
                return False
        return True

logger = logging.getLogger("mlflow_service")
# A√±adir el filtro al logger principal
logger.addFilter(MigrationLogFilter())

# Importar configuraci√≥n y utilidades
from src.config.settings import settings
from src.utils.gcp_auth import gcp_auth_manager

# Variables globales
mlflow_process: Optional[subprocess.Popen] = None


def log_subprocess_output(pipe, log_level):
    """Lee y registra la salida de un subproceso l√≠nea por l√≠nea."""
    try:
        for line in iter(pipe.readline, ''):
            logger.log(log_level, f"[MLflow Server] {line.strip()}")
    except Exception as e:
        logger.warning(f"Error leyendo la salida del subproceso: {e}")
    finally:
        if pipe:
            pipe.close()

def setup_signal_handlers():
    """Configura los manejadores de se√±ales para terminaci√≥n limpia."""
    
    def handle_termination(sig, frame):
        """Manejador de se√±ales para terminar limpiamente."""
        global mlflow_process
        
        logger.info("üõë Recibida se√±al de terminaci√≥n. Deteniendo servidor MLflow...")
        
        # Terminar proceso de MLflow
        if mlflow_process:
            try:
                mlflow_process.terminate()
                exit_code = mlflow_process.wait(timeout=10)
                logger.info(f"‚úÖ Servidor MLflow detenido. C√≥digo de salida: {exit_code}")
            except subprocess.TimeoutExpired:
                logger.warning("‚ö†Ô∏è Timeout. Forzando terminaci√≥n...")
                mlflow_process.kill()
                mlflow_process.wait()
                logger.info("‚úÖ Proceso MLflow terminado forzosamente")
            except Exception as e:
                logger.error(f"‚ùå Error terminando proceso MLflow: {e}")
        
        # Limpiar recursos
        try:
            gcp_auth_manager.cleanup()
            logger.info("‚úÖ Limpieza completada")
        except Exception as e:
            logger.error(f"‚ùå Error durante limpieza: {e}")
        
        logger.info("‚úÖ Servicio MLflow detenido completamente")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, handle_termination)
    signal.signal(signal.SIGTERM, handle_termination)


def verify_mlflow_installation() -> bool:
    """
    Verifica que MLflow est√© instalado correctamente.
    
    Returns:
        bool: True si MLflow est√° instalado
    """
    try:
        import mlflow
        logger.info(f"‚úÖ MLflow versi√≥n {mlflow.__version__} detectado")
        return True
    except ImportError:
        logger.error("‚ùå MLflow no est√° instalado")
        return False


def is_port_in_use(port: int, host: str = "127.0.0.1") -> bool:
    """
    Verifica si un puerto est√° en uso.
    
    Args:
        port: N√∫mero de puerto
        host: Host para verificar
        
    Returns:
        bool: True si el puerto est√° en uso
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        return sock.connect_ex((host, port)) == 0


def wait_for_mlflow_server(host: str, port: int, timeout: int = 30) -> bool:
    """
    Espera a que el servidor MLflow responda.
    
    Args:
        host: Host del servidor
        port: Puerto del servidor
        timeout: Tiempo m√°ximo de espera en segundos
        
    Returns:
        bool: True si el servidor responde
    """
    logger.info(f"üîÑ Esperando servidor MLflow en {host}:{port}")
    
    check_host = "127.0.0.1" if host == "0.0.0.0" else host
    
    for _ in range(timeout):
        if mlflow_process and mlflow_process.poll() is not None:
            logger.error(f"‚ùå El proceso de MLflow termin√≥ inesperadamente. Revisa los logs de '[MLflow Server]'.")
            return False

        if is_port_in_use(port, check_host):
            logger.info(f"‚úÖ Servidor MLflow disponible en {host}:{port}")
            return True
        time.sleep(1)
    
    logger.error(f"‚ùå Servidor MLflow no respondi√≥ en {timeout} segundos")
    return False

def upgrade_database_schema() -> bool:
    """
    Actualiza el esquema de la base de datos MLflow a la √∫ltima versi√≥n.
    Es un paso crucial para evitar errores de migraci√≥n concurrentes dentro
    del servidor MLflow, especialmente en Windows.
    
    Returns:
        bool: True si la actualizaci√≥n fue exitosa o no fue necesaria.
    """
    logger.info("üîÑ Verificando y actualizando el esquema de la base de datos MLflow...")
    
    try:
        backend_store_uri = settings.backend_store_uri
        cmd = ['mlflow', 'db', 'upgrade', backend_store_uri]
        
        process = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=True,
            encoding='utf-8',
            errors='replace'
        )
        
        stdout = process.stdout.lower()
        if "upgraded successfully" in stdout:
            logger.info("‚úÖ Esquema de la base de datos actualizado exitosamente.")
        elif "is up to date" in stdout or "alembic_version" in stdout:
            logger.info("‚úÖ El esquema de la base de datos ya est√° actualizado.")
        else:
            logger.info(f"Resultado de la actualizaci√≥n de la BD: {process.stdout.strip()}")
        return True

    except subprocess.CalledProcessError as e:
        stderr_lower = e.stderr.lower()
        if "does not exist" in stderr_lower or "OperationalError" in e.stderr:
            logger.warning("‚ö†Ô∏è La base de datos parece no existir a√∫n. Se crear√° al iniciar el servidor.")
            return True
        
        logger.error("‚ùå Error actualizando el esquema de la base de datos.")
        logger.error(f"   Comando: {' '.join(e.cmd)}")
        logger.error(f"   Salida de error:\n{e.stderr}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error inesperado durante la actualizaci√≥n del esquema: {e}")
        return False

def start_mlflow_server() -> bool:
    """
    Inicia el servidor MLflow.
    
    Returns:
        bool: True si el servidor se inici√≥ correctamente
    """
    global mlflow_process
    
    # Configurar host y puerto
    host = settings.MLFLOW_HOST
    port = settings.MLFLOW_TRACKING_PORT
    
    logger.info(f"üöÄ Iniciando servidor MLflow")
    logger.info(f"   Host: {host}")
    logger.info(f"   Puerto: {port}")
    logger.info(f"   Artifact root: {settings.artifact_root}")
    logger.info(f"   Backend store: PostgreSQL")
    
    # Verificar que el puerto est√© libre
    if is_port_in_use(port, host):
        logger.error(f"‚ùå Puerto {port} ya est√° en uso")
        return False
    
    # Obtener backend store URI directamente de la configuraci√≥n
    backend_store_uri = settings.backend_store_uri
    if not backend_store_uri:
        logger.error("‚ùå La URI del backend store no est√° configurada (MLFLOW_POSTGRES_CONNECTION_STRING).")
        return False
    logger.info(f"‚úÖ Backend store URI configurada.")
    
    # Configurar credenciales GCP si es necesario
    if settings.artifact_root.startswith("gs://"):
        logger.info("üîë Configurando credenciales GCP...")
        gcp_auth_manager.setup_gcp_credentials()
        
        # Validar credenciales
        if gcp_auth_manager.validate_gcs_credentials():
            logger.info("‚úÖ Credenciales GCP validadas")
        else:
            logger.warning("‚ö†Ô∏è No se pudieron validar las credenciales GCP")
    
    # Construir comando MLflow
    cmd = [
        'mlflow', 'server',
        '--backend-store-uri', backend_store_uri,
        '--default-artifact-root', settings.artifact_root,
        '--host', host,
        '--port', str(port),
        '--serve-artifacts'
    ]
    
    logger.info(f"üîß Comando: {' '.join(cmd)}")
    
    # En Windows, waitress no soporta 'workers'. Para evitar que MLflow falle,
    # creamos un entorno para el subproceso que no incluya la variable de
    # entorno en conflicto (`MLFLOW_WORKERS`), que MLflow lee internamente.
    env = os.environ.copy()
    if sys.platform == "win32":
        env.pop('MLFLOW_WORKERS', None)

    # Iniciar proceso MLflow
    try:
        mlflow_process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1,
            universal_newlines=True,
            encoding='utf-8',
            errors='replace',
            env=env
        )

        # Iniciar hilos para leer stdout y stderr sin bloquear
        stdout_thread = threading.Thread(target=log_subprocess_output, args=(mlflow_process.stdout, logging.INFO))
        stderr_thread = threading.Thread(target=log_subprocess_output, args=(mlflow_process.stderr, logging.ERROR))
        stdout_thread.daemon = True
        stderr_thread.daemon = True
        stdout_thread.start()
        stderr_thread.start()
        
        logger.info(f"‚úÖ Proceso MLflow iniciado (PID: {mlflow_process.pid})")
        
        # Esperar a que el servidor est√© disponible
        if wait_for_mlflow_server(host, port, timeout=30):
            logger.info(f"üéâ MLflow UI disponible en: http://{host}:{port}")
            return True
        else:
            logger.error("‚ùå Timeout esperando que MLflow se inicie")
            if mlflow_process and mlflow_process.poll() is None:
                mlflow_process.terminate()
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error iniciando MLflow: {e}")
        return False


def main():
    """Funci√≥n principal del servicio MLflow."""
    logger.info("üîÑ Iniciando MLflow Service")
    
    # Configurar manejadores de se√±ales
    setup_signal_handlers()
    
    # Verificar instalaci√≥n de MLflow
    if not verify_mlflow_installation():
        sys.exit(1)

    # Iniciar servidor MLflow.
    # El propio comando `mlflow server` gestionar√° la conexi√≥n a la base de datos
    # y las migraciones. El filtro de logs se encargar√° de la verbosidad.
    if start_mlflow_server():
        logger.info("‚úÖ Servicio MLflow iniciado correctamente")
        
        try:
            # Mantener el proceso en ejecuci√≥n
            mlflow_process.wait()
        except KeyboardInterrupt:
            logger.info("üõë Interrupci√≥n de teclado recibida")
        except Exception as e:
            logger.error(f"‚ùå Error durante ejecuci√≥n: {e}")
    else:
        logger.error("‚ùå Error iniciando servicio MLflow")
        sys.exit(1)


if __name__ == '__main__':

    main() 